'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34011
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="TatilSepeti")>  _
Partial Public Class CustomerModelDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertCity(instance As City)
    End Sub
  Partial Private Sub UpdateCity(instance As City)
    End Sub
  Partial Private Sub DeleteCity(instance As City)
    End Sub
  Partial Private Sub InsertCustomerAgent(instance As CustomerAgent)
    End Sub
  Partial Private Sub UpdateCustomerAgent(instance As CustomerAgent)
    End Sub
  Partial Private Sub DeleteCustomerAgent(instance As CustomerAgent)
    End Sub
  Partial Private Sub InsertSector(instance As Sector)
    End Sub
  Partial Private Sub UpdateSector(instance As Sector)
    End Sub
  Partial Private Sub DeleteSector(instance As Sector)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CustomerApp.Models.My.MySettings.Default.TatilSepetiConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Cities() As System.Data.Linq.Table(Of City)
		Get
			Return Me.GetTable(Of City)
		End Get
	End Property
	
	Public ReadOnly Property CustomerAgents() As System.Data.Linq.Table(Of CustomerAgent)
		Get
			Return Me.GetTable(Of CustomerAgent)
		End Get
	End Property
	
	Public ReadOnly Property Sectors() As System.Data.Linq.Table(Of Sector)
		Get
			Return Me.GetTable(Of Sector)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="tsUser.sp_CustomerCount")>  _
	Public Function sp_CustomerCount() As ISingleResult(Of sp_CustomerCountResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of sp_CustomerCountResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="tsUser.sp_InsertCustomers")>  _
	Public Function sp_InsertCustomers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NameSurname", DbType:="NVarChar(250)")> ByVal nameSurname As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Company", DbType:="NVarChar(250)")> ByVal company As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Phone", DbType:="NVarChar(50)")> ByVal phone As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Mobile", DbType:="NVarChar(50)")> ByVal mobile As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Mail", DbType:="NVarChar(50)")> ByVal mail As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Address", DbType:="NVarChar(500)")> ByVal address As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CityID", DbType:="Int")> ByVal cityID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SectorID", DbType:="Int")> ByVal sectorID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AgentID", DbType:="Int")> ByVal agentID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AuthorizedPerson", DbType:="NVarChar(250)")> ByVal authorizedPerson As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AuthorizedPersonMobile", DbType:="NVarChar(50)")> ByVal authorizedPersonMobile As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TaxOffice", DbType:="NVarChar(250)")> ByVal taxOffice As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TaxNumber", DbType:="NVarChar(150)")> ByVal taxNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Notes", DbType:="NVarChar(4000)")> ByVal notes As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nameSurname, company, phone, mobile, mail, address, cityID, sectorID, agentID, authorizedPerson, authorizedPersonMobile, taxOffice, taxNumber, notes)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="tsUser.sp_UpdateCustomers")>  _
	Public Function sp_UpdateCustomers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustomerID_condition", DbType:="Int")> ByVal customerID_condition As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NameSurname", DbType:="NVarChar(250)")> ByVal nameSurname As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Company", DbType:="NVarChar(250)")> ByVal company As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Phone", DbType:="NVarChar(50)")> ByVal phone As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Mobile", DbType:="NVarChar(50)")> ByVal mobile As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Mail", DbType:="NVarChar(50)")> ByVal mail As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Address", DbType:="NVarChar(500)")> ByVal address As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CityID", DbType:="Int")> ByVal cityID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SectorID", DbType:="Int")> ByVal sectorID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AgentID", DbType:="Int")> ByVal agentID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AuthorizedPerson", DbType:="NVarChar(250)")> ByVal authorizedPerson As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AuthorizedPersonMobile", DbType:="NVarChar(50)")> ByVal authorizedPersonMobile As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TaxOffice", DbType:="NVarChar(250)")> ByVal taxOffice As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TaxNumber", DbType:="NVarChar(150)")> ByVal taxNumber As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Notes", DbType:="NVarChar(4000)")> ByVal notes As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), customerID_condition, nameSurname, company, phone, mobile, mail, address, cityID, sectorID, agentID, authorizedPerson, authorizedPersonMobile, taxOffice, taxNumber, notes)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="tsUser.sp_CustomersbyID")>  _
	Public Function sp_CustomersbyID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustomerID", DbType:="Int")> ByVal customerID As System.Nullable(Of Integer)) As ISingleResult(Of sp_CustomersbyIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), customerID)
		Return CType(result.ReturnValue,ISingleResult(Of sp_CustomersbyIDResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerID As Integer
	
	Private _NameSurname As String
	
	Private _Company As String
	
	Private _Phone As String
	
	Private _Mobile As String
	
	Private _Mail As String
	
	Private _Address As String
	
	Private _CityID As System.Nullable(Of Integer)
	
	Private _SectorID As System.Nullable(Of Integer)
	
	Private _AgentID As System.Nullable(Of Integer)
	
	Private _AuthorizedPerson As String
	
	Private _AuthorizedPersonMobile As String
	
	Private _TaxOffice As String
	
	Private _TaxNumber As String
	
	Private _Notes As String
	
	Private _City As EntityRef(Of City)
	
	Private _CustomerAgent As EntityRef(Of CustomerAgent)
	
	Private _Sector As EntityRef(Of Sector)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnNameSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnNameSurnameChanged()
    End Sub
    Partial Private Sub OnCompanyChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnMailChanging(value As String)
    End Sub
    Partial Private Sub OnMailChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnCityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCityIDChanged()
    End Sub
    Partial Private Sub OnSectorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSectorIDChanged()
    End Sub
    Partial Private Sub OnAgentIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAgentIDChanged()
    End Sub
    Partial Private Sub OnAuthorizedPersonChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorizedPersonChanged()
    End Sub
    Partial Private Sub OnAuthorizedPersonMobileChanging(value As String)
    End Sub
    Partial Private Sub OnAuthorizedPersonMobileChanged()
    End Sub
    Partial Private Sub OnTaxOfficeChanging(value As String)
    End Sub
    Partial Private Sub OnTaxOfficeChanged()
    End Sub
    Partial Private Sub OnTaxNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTaxNumberChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._City = CType(Nothing, EntityRef(Of City))
		Me._CustomerAgent = CType(Nothing, EntityRef(Of CustomerAgent))
		Me._Sector = CType(Nothing, EntityRef(Of Sector))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameSurname", DbType:="NVarChar(250)")>  _
	Public Property NameSurname() As String
		Get
			Return Me._NameSurname
		End Get
		Set
			If (String.Equals(Me._NameSurname, value) = false) Then
				Me.OnNameSurnameChanging(value)
				Me.SendPropertyChanging
				Me._NameSurname = value
				Me.SendPropertyChanged("NameSurname")
				Me.OnNameSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Company", DbType:="NVarChar(250)")>  _
	Public Property Company() As String
		Get
			Return Me._Company
		End Get
		Set
			If (String.Equals(Me._Company, value) = false) Then
				Me.OnCompanyChanging(value)
				Me.SendPropertyChanging
				Me._Company = value
				Me.SendPropertyChanged("Company")
				Me.OnCompanyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(50)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mail", DbType:="NVarChar(50)")>  _
	Public Property Mail() As String
		Get
			Return Me._Mail
		End Get
		Set
			If (String.Equals(Me._Mail, value) = false) Then
				Me.OnMailChanging(value)
				Me.SendPropertyChanging
				Me._Mail = value
				Me.SendPropertyChanged("Mail")
				Me.OnMailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(500)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityID", DbType:="Int")>  _
	Public Property CityID() As System.Nullable(Of Integer)
		Get
			Return Me._CityID
		End Get
		Set
			If (Me._CityID.Equals(value) = false) Then
				If Me._City.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCityIDChanging(value)
				Me.SendPropertyChanging
				Me._CityID = value
				Me.SendPropertyChanged("CityID")
				Me.OnCityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectorID", DbType:="Int")>  _
	Public Property SectorID() As System.Nullable(Of Integer)
		Get
			Return Me._SectorID
		End Get
		Set
			If (Me._SectorID.Equals(value) = false) Then
				If Me._Sector.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSectorIDChanging(value)
				Me.SendPropertyChanging
				Me._SectorID = value
				Me.SendPropertyChanged("SectorID")
				Me.OnSectorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgentID", DbType:="Int")>  _
	Public Property AgentID() As System.Nullable(Of Integer)
		Get
			Return Me._AgentID
		End Get
		Set
			If (Me._AgentID.Equals(value) = false) Then
				If Me._CustomerAgent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAgentIDChanging(value)
				Me.SendPropertyChanging
				Me._AgentID = value
				Me.SendPropertyChanged("AgentID")
				Me.OnAgentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorizedPerson", DbType:="NVarChar(250)")>  _
	Public Property AuthorizedPerson() As String
		Get
			Return Me._AuthorizedPerson
		End Get
		Set
			If (String.Equals(Me._AuthorizedPerson, value) = false) Then
				Me.OnAuthorizedPersonChanging(value)
				Me.SendPropertyChanging
				Me._AuthorizedPerson = value
				Me.SendPropertyChanged("AuthorizedPerson")
				Me.OnAuthorizedPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorizedPersonMobile", DbType:="NVarChar(50)")>  _
	Public Property AuthorizedPersonMobile() As String
		Get
			Return Me._AuthorizedPersonMobile
		End Get
		Set
			If (String.Equals(Me._AuthorizedPersonMobile, value) = false) Then
				Me.OnAuthorizedPersonMobileChanging(value)
				Me.SendPropertyChanging
				Me._AuthorizedPersonMobile = value
				Me.SendPropertyChanged("AuthorizedPersonMobile")
				Me.OnAuthorizedPersonMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxOffice", DbType:="NVarChar(250)")>  _
	Public Property TaxOffice() As String
		Get
			Return Me._TaxOffice
		End Get
		Set
			If (String.Equals(Me._TaxOffice, value) = false) Then
				Me.OnTaxOfficeChanging(value)
				Me.SendPropertyChanging
				Me._TaxOffice = value
				Me.SendPropertyChanged("TaxOffice")
				Me.OnTaxOfficeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxNumber", DbType:="NVarChar(150)")>  _
	Public Property TaxNumber() As String
		Get
			Return Me._TaxNumber
		End Get
		Set
			If (String.Equals(Me._TaxNumber, value) = false) Then
				Me.OnTaxNumberChanging(value)
				Me.SendPropertyChanging
				Me._TaxNumber = value
				Me.SendPropertyChanged("TaxNumber")
				Me.OnTaxNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(4000)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Customer", Storage:="_City", ThisKey:="CityID", OtherKey:="CityID", IsForeignKey:=true)>  _
	Public Property City() As City
		Get
			Return Me._City.Entity
		End Get
		Set
			Dim previousValue As City = Me._City.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._City.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._City.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._City.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._CityID = value.CityID
				Else
					Me._CityID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("City")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CustomerAgent_Customer", Storage:="_CustomerAgent", ThisKey:="AgentID", OtherKey:="AgentID", IsForeignKey:=true)>  _
	Public Property CustomerAgent() As CustomerAgent
		Get
			Return Me._CustomerAgent.Entity
		End Get
		Set
			Dim previousValue As CustomerAgent = Me._CustomerAgent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CustomerAgent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CustomerAgent.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._CustomerAgent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._AgentID = value.AgentID
				Else
					Me._AgentID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CustomerAgent")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sector_Customer", Storage:="_Sector", ThisKey:="SectorID", OtherKey:="SectorID", IsForeignKey:=true)>  _
	Public Property Sector() As Sector
		Get
			Return Me._Sector.Entity
		End Get
		Set
			Dim previousValue As Sector = Me._Sector.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sector.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sector.Entity = Nothing
					previousValue.Customers.Remove(Me)
				End If
				Me._Sector.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Customers.Add(Me)
					Me._SectorID = value.SectorID
				Else
					Me._SectorID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sector")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tsUser.Cities")>  _
Partial Public Class City
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CityID As Integer
	
	Private _CityName As String
	
	Private _Customers As EntitySet(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCityIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCityIDChanged()
    End Sub
    Partial Private Sub OnCityNameChanging(value As String)
    End Sub
    Partial Private Sub OnCityNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CityID() As Integer
		Get
			Return Me._CityID
		End Get
		Set
			If ((Me._CityID = value)  _
						= false) Then
				Me.OnCityIDChanging(value)
				Me.SendPropertyChanging
				Me._CityID = value
				Me.SendPropertyChanged("CityID")
				Me.OnCityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityName", DbType:="NVarChar(250)")>  _
	Public Property CityName() As String
		Get
			Return Me._CityName
		End Get
		Set
			If (String.Equals(Me._CityName, value) = false) Then
				Me.OnCityNameChanging(value)
				Me.SendPropertyChanging
				Me._CityName = value
				Me.SendPropertyChanged("CityName")
				Me.OnCityNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="City_Customer", Storage:="_Customers", ThisKey:="CityID", OtherKey:="CityID")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.City = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.City = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tsUser.CustomerAgents")>  _
Partial Public Class CustomerAgent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AgentID As Integer
	
	Private _CustomerAgent As String
	
	Private _Customers As EntitySet(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAgentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAgentIDChanged()
    End Sub
    Partial Private Sub OnCustomerAgentChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerAgentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AgentID() As Integer
		Get
			Return Me._AgentID
		End Get
		Set
			If ((Me._AgentID = value)  _
						= false) Then
				Me.OnAgentIDChanging(value)
				Me.SendPropertyChanging
				Me._AgentID = value
				Me.SendPropertyChanged("AgentID")
				Me.OnAgentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAgent", DbType:="NVarChar(250)")>  _
	Public Property CustomerAgent() As String
		Get
			Return Me._CustomerAgent
		End Get
		Set
			If (String.Equals(Me._CustomerAgent, value) = false) Then
				Me.OnCustomerAgentChanging(value)
				Me.SendPropertyChanging
				Me._CustomerAgent = value
				Me.SendPropertyChanged("CustomerAgent")
				Me.OnCustomerAgentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CustomerAgent_Customer", Storage:="_Customers", ThisKey:="AgentID", OtherKey:="AgentID")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.CustomerAgent = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.CustomerAgent = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="tsUser.Sectors")>  _
Partial Public Class Sector
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SectorID As Integer
	
	Private _Sector As String
	
	Private _Customers As EntitySet(Of Customer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSectorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSectorIDChanged()
    End Sub
    Partial Private Sub OnSectorChanging(value As String)
    End Sub
    Partial Private Sub OnSectorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Customers = New EntitySet(Of Customer)(AddressOf Me.attach_Customers, AddressOf Me.detach_Customers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SectorID() As Integer
		Get
			Return Me._SectorID
		End Get
		Set
			If ((Me._SectorID = value)  _
						= false) Then
				Me.OnSectorIDChanging(value)
				Me.SendPropertyChanging
				Me._SectorID = value
				Me.SendPropertyChanged("SectorID")
				Me.OnSectorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sector", DbType:="NVarChar(250)")>  _
	Public Property Sector() As String
		Get
			Return Me._Sector
		End Get
		Set
			If (String.Equals(Me._Sector, value) = false) Then
				Me.OnSectorChanging(value)
				Me.SendPropertyChanging
				Me._Sector = value
				Me.SendPropertyChanged("Sector")
				Me.OnSectorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sector_Customer", Storage:="_Customers", ThisKey:="SectorID", OtherKey:="SectorID")>  _
	Public Property Customers() As EntitySet(Of Customer)
		Get
			Return Me._Customers
		End Get
		Set
			Me._Customers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Sector = Me
	End Sub
	
	Private Sub detach_Customers(ByVal entity As Customer)
		Me.SendPropertyChanging
		entity.Sector = Nothing
	End Sub
End Class

Partial Public Class sp_CustomerCountResult
	
	Private _Column1 As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_Column1", DbType:="Int")>  _
	Public Property Column1() As System.Nullable(Of Integer)
		Get
			Return Me._Column1
		End Get
		Set
			If (Me._Column1.Equals(value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_CustomersbyIDResult
	
	Private _CustomerID As Integer
	
	Private _NameSurname As String
	
	Private _Company As String
	
	Private _Phone As String
	
	Private _Mobile As String
	
	Private _Mail As String
	
	Private _Address As String
	
	Private _CityID As System.Nullable(Of Integer)
	
	Private _SectorID As System.Nullable(Of Integer)
	
	Private _AgentID As System.Nullable(Of Integer)
	
	Private _AuthorizedPerson As String
	
	Private _AuthorizedPersonMobile As String
	
	Private _TaxOffice As String
	
	Private _TaxNumber As String
	
	Private _Notes As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me._CustomerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NameSurname", DbType:="NVarChar(250)")>  _
	Public Property NameSurname() As String
		Get
			Return Me._NameSurname
		End Get
		Set
			If (String.Equals(Me._NameSurname, value) = false) Then
				Me._NameSurname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Company", DbType:="NVarChar(250)")>  _
	Public Property Company() As String
		Get
			Return Me._Company
		End Get
		Set
			If (String.Equals(Me._Company, value) = false) Then
				Me._Company = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me._Phone = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(50)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me._Mobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mail", DbType:="NVarChar(50)")>  _
	Public Property Mail() As String
		Get
			Return Me._Mail
		End Get
		Set
			If (String.Equals(Me._Mail, value) = false) Then
				Me._Mail = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(500)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityID", DbType:="Int")>  _
	Public Property CityID() As System.Nullable(Of Integer)
		Get
			Return Me._CityID
		End Get
		Set
			If (Me._CityID.Equals(value) = false) Then
				Me._CityID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SectorID", DbType:="Int")>  _
	Public Property SectorID() As System.Nullable(Of Integer)
		Get
			Return Me._SectorID
		End Get
		Set
			If (Me._SectorID.Equals(value) = false) Then
				Me._SectorID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgentID", DbType:="Int")>  _
	Public Property AgentID() As System.Nullable(Of Integer)
		Get
			Return Me._AgentID
		End Get
		Set
			If (Me._AgentID.Equals(value) = false) Then
				Me._AgentID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorizedPerson", DbType:="NVarChar(250)")>  _
	Public Property AuthorizedPerson() As String
		Get
			Return Me._AuthorizedPerson
		End Get
		Set
			If (String.Equals(Me._AuthorizedPerson, value) = false) Then
				Me._AuthorizedPerson = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthorizedPersonMobile", DbType:="NVarChar(50)")>  _
	Public Property AuthorizedPersonMobile() As String
		Get
			Return Me._AuthorizedPersonMobile
		End Get
		Set
			If (String.Equals(Me._AuthorizedPersonMobile, value) = false) Then
				Me._AuthorizedPersonMobile = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxOffice", DbType:="NVarChar(250)")>  _
	Public Property TaxOffice() As String
		Get
			Return Me._TaxOffice
		End Get
		Set
			If (String.Equals(Me._TaxOffice, value) = false) Then
				Me._TaxOffice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TaxNumber", DbType:="NVarChar(150)")>  _
	Public Property TaxNumber() As String
		Get
			Return Me._TaxNumber
		End Get
		Set
			If (String.Equals(Me._TaxNumber, value) = false) Then
				Me._TaxNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NVarChar(4000)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me._Notes = value
			End If
		End Set
	End Property
End Class
